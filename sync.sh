#!/bin/bash

# ====================================================================
# Script de Sincroniza√ß√£o com GitHub v5.5 (Interativo e Robusto)
#
# L√≥gica de stash corrigida para evitar falsos positivos de conflito.
# Usa detec√ß√£o precisa de altera√ß√µes para decidir se o stash √© necess√°rio.
# Verifica se um stash existe antes de tentar restaur√°-lo.
#
# Uso:
#    ./sync.sh       -> Executa o modo de sincroniza√ß√£o padr√£o e seguro.
#    ./sync.sh force -> Executa o modo for√ßado (espelho local -> remoto).
# ====================================================================

# --- Configura√ß√£o ---
set -e 

REPO_URL="git@github.com:viniciussilva-eng/dados_base.git"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log aprimorada
log() {
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") - $1"
}

# --- In√≠cio do Script ---
log "${BLUE}============================================${NC}"
log "${BLUE}  INICIANDO SCRIPT DE SINCRONIZA√á√ÉO v5.5      ${NC}"
log "${BLUE}============================================${NC}"

PROJETO_DIR=$(pwd)
log "${YELLOW}üìÅ Projeto localizado em: $PROJETO_DIR${NC}"

# 1. VALIDA√á√ïES E SETUP INICIAL
git config --global --add safe.directory "$PROJETO_DIR"
if [ ! -d ".git" ]; then 
    log "${YELLOW}‚ö†Ô∏è  Reposit√≥rio .git n√£o encontrado. Inicializando um novo...${NC}"
    git init && git branch -M main
fi

# 2. CONFIGURA√á√ÉO DO REMOTO (SSH)
log "${BLUE}üîß Verificando e configurando o reposit√≥rio remoto (SSH): $REPO_URL${NC}"
git remote set-url origin "$REPO_URL" 2>/dev/null || git remote add origin "$REPO_URL"
git lfs install

# 3. SELE√á√ÉO DO MODO DE OPERA√á√ÉO
if [[ "$1" == "force" ]]; then
    # ==================== MODO FOR√áADO (ESPELHO) ====================
    # (O modo for√ßado permanece o mesmo)
    log "${RED}üö® MODO FOR√áADO ATIVADO! üö®${NC}"
    log "${YELLOW}Este modo far√° o reposit√≥rio remoto ser um ESPELHO EXATO da sua pasta local.${NC}"
    log "${RED}AVISO: Commits existentes no remoto que n√£o est√£o no local ser√£o perdidos.${NC}"
    read -p "Voc√™ tem certeza que deseja continuar? (s/N): " confirm < /dev/tty
    if [[ "$confirm" != "s" && "$confirm" != "S" ]]; then log "${GREEN}Opera√ß√£o cancelada pelo usu√°rio.${NC}" && exit 0; fi

    log "${BLUE}‚ûï Adicionando todos os arquivos ao stage...${NC}"
    git add .
    log "${BLUE}‚úèÔ∏è  Criando commit de espelhamento...${NC}"
    git commit -m "refactor(force): Sincroniza√ß√£o for√ßada para espelhar estado local em $(date +"%Y-%m-%d %H:%M")" || true
    
    log "${BLUE}üì§ Enviando arquivos grandes via Git LFS (se houver)...${NC}"
    git lfs push --all origin main
    log "${RED}üöÄ Executando PUSH FOR√áADO para 'main'...${NC}"
    git push --force origin main

else
    # ==================== MODO PADR√ÉO (SEGURO) ====================
    log "${GREEN}‚ñ∂Ô∏è  Executando em modo de sincroniza√ß√£o padr√£o (seguro).${NC}"

    # ==============================================================================
    # üåü L√ìGICA DE STASH CORRIGIDA üåü
    # ==============================================================================
    STASH_CREATED=false
    # Usa `git diff-index` para verificar APENAS altera√ß√µes em arquivos rastreados,
    # que √© o comportamento padr√£o do `git stash`.
    if ! git diff-index --quiet HEAD --; then
        log "${YELLOW}‚ö†Ô∏è  Detectadas altera√ß√µes em arquivos rastreados. Guardando-as temporariamente...${NC}"
        git stash push -m "sync.sh: Stash autom√°tico antes da sincroniza√ß√£o"
        STASH_CREATED=true
        log "${GREEN}    ‚úÖ Altera√ß√µes guardadas com sucesso.${NC}"
    else
        log "${GREEN}‚úÖ Nenhuma altera√ß√£o em arquivos rastreados. Nenhum stash necess√°rio.${NC}"
    fi
    
    log "${BLUE}üîÑ Sincronizando com o reposit√≥rio remoto (pull --rebase)...${NC}"
    git pull --rebase origin main

    log "${BLUE}üîÑ Atualizando subm√≥dulos (se houver) com as vers√µes remotas...${NC}"
    git submodule update --remote --merge

    # L√≥gica de restaura√ß√£o mais segura
    if [ "$STASH_CREATED" = true ]; then
        log "${BLUE}üîÑ Restaurando suas altera√ß√µes locais que foram guardadas...${NC}"
        # Tenta aplicar o stash. Se falhar, √© um conflito real.
        if ! git stash pop; then
            log "${RED}üö® CONFLITO REAL AO RESTAURAR! üö® N√£o foi poss√≠vel reaplicar suas altera√ß√µes automaticamente.${NC}"
            log "${YELLOW}    -> Suas altera√ß√µes ainda est√£o salvas no stash. Resolva os conflitos indicados nos arquivos.${NC}"
            exit 1
        else
            log "${GREEN}    ‚úÖ Altera√ß√µes restauradas com sucesso.${NC}"
        fi
    fi
    # ==============================================================================
    
    log "${YELLOW}üîç Verificando arquivos e diret√≥rios n√£o rastreados...${NC}"
    git ls-files --others --exclude-standard | while read -r untracked_path; do
        log "${YELLOW}‚ùì Encontrado item n√£o rastreado: '${untracked_path}'. O que fazer?${NC}"
        echo -e "   1. ${RED}Ignorar permanentemente${NC} (adicionar ao .gitignore)"
        echo -e "   2. ${BLUE}Rastrear com Git LFS${NC} (para dados e arquivos grandes)"
        echo -e "   3. ${GREEN}Rastrear com Git Normal${NC} (para c√≥digo-fonte e arquivos pequenos)"
        echo -e "   4. Pular (ignorar por agora, n√£o fazer nada)"
        read -p "   Sua escolha [1-4, padr√£o=4]: " choice < /dev/tty
        case "${choice:-4}" in
            1)
                log "   -> Adicionando '${untracked_path}' ao .gitignore..."
                [[ -n $(tail -c1 .gitignore 2>/dev/null) ]] && echo "" >> .gitignore
                echo "${untracked_path}" >> .gitignore; git add .gitignore
                log "${GREEN}   ‚úÖ '${untracked_path}' adicionado ao .gitignore.${NC}"
                ;;
            2)
                log "   -> Rastreando '${untracked_path}' com Git LFS..."
                git lfs track "${untracked_path}"; git add .gitattributes; git add "${untracked_path}"
                log "${GREEN}   ‚úÖ '${untracked_path}' agora √© rastreado pelo LFS.${NC}"
                ;;
            3)
                log "   -> Rastreando '${untracked_path}' com Git normal..."
                git add "${untracked_path}"
                log "${GREEN}   ‚úÖ '${untracked_path}' adicionado normalmente.${NC}"
                ;;
            *)
                log "${YELLOW}   -> '${untracked_path}' ser√° ignorado nesta sincroniza√ß√£o.${NC}"
                ;;
        esac; echo "" 
    done

    git add .
    # (L√≥gica de subm√≥dulo continua a mesma)

    if [ -z "$(git status --porcelain)" ]; then
        log "${GREEN}‚úÖ Reposit√≥rio local j√° est√° sincronizado. Nenhuma nova altera√ß√£o para enviar.${NC}"
        exit 0
    fi

    log "${BLUE}‚úèÔ∏è  Criando commit com as altera√ß√µes locais...${NC}"
    git commit -m "feat(auto): Sincroniza√ß√£o de arquivos em $(date +"%Y-%m-%d %H:%M")"

    log "${BLUE}üì§ Enviando arquivos grandes via Git LFS (se houver)...${NC}"
    git lfs push --all origin main

    log "${GREEN}üöÄ Enviando altera√ß√µes para o reposit√≥rio remoto (push)...${NC}"
    git push origin main
fi

# --- RELAT√ìRIO FINAL ---
log "${GREEN}============================================${NC}"
log "${GREEN}    SINCRONIZA√á√ÉO CONCLU√çDA COM SUCESSO!      ${NC}"
log "${GREEN}============================================${NC}"
log "${YELLOW}√öltimo commit enviado:${NC}"
git log -1 --pretty=format:"%h - %s (%cr)"
echo ""
log "${GREEN}============================================${NC}"

exit 0